/// <reference types="react" />
import { ColorRepresentation, Mesh } from "three";
import { InteractableProps } from "../modifiers/Interactable";
import { MeshProps } from "@react-three/fiber";
declare type HitBox = {
    args: [number, number, number];
    visible?: boolean;
    color?: ColorRepresentation;
} & Omit<InteractableProps, "children"> & Omit<MeshProps, "args">;
export declare const HitBox: import("react").ForwardRefExoticComponent<Pick<HitBox, "attach" | "args" | "children" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isObject3D" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getObjectsByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "material" | "raycaster" | "color" | "isMesh" | "geometry" | "morphTargetInfluences" | "morphTargetDictionary" | "updateMorphTargets" | "getVertexPosition" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "onHover" | "onUnHover"> & import("react").RefAttributes<Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>>>;
export {};
